Traceback (most recent call last):
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Miguel\anaconda3\Lib\asyncio\base_events.py", line 653, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Miguel\anaconda3\Lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
pd.options.display.max_columns = 10

# Load in data and view
df = pd.read_stata('https://github.com/QuantEcon/lecture-python/blob/master/source/_static/lecture_specific/mle/fp.dta?raw=true')
df.head()
#df.describe()
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mConnectionResetError[0m                      Traceback (most recent call last)
File [1;32m~\anaconda3\Lib\urllib\request.py:1348[0m, in [0;36mAbstractHTTPHandler.do_open[1;34m(self, http_class, req, **http_conn_args)[0m
[0;32m   1347[0m [38;5;28;01mtry[39;00m:
[1;32m-> 1348[0m     h[38;5;241m.[39mrequest(req[38;5;241m.[39mget_method(), req[38;5;241m.[39mselector, req[38;5;241m.[39mdata, headers,
[0;32m   1349[0m               encode_chunked[38;5;241m=[39mreq[38;5;241m.[39mhas_header([38;5;124m'[39m[38;5;124mTransfer-encoding[39m[38;5;124m'[39m))
[0;32m   1350[0m [38;5;28;01mexcept[39;00m [38;5;167;01mOSError[39;00m [38;5;28;01mas[39;00m err: [38;5;66;03m# timeout error[39;00m

File [1;32m~\anaconda3\Lib\http\client.py:1286[0m, in [0;36mHTTPConnection.request[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1285[0m [38;5;250m[39m[38;5;124;03m"""Send a complete request to the server."""[39;00m
[1;32m-> 1286[0m [38;5;28mself[39m[38;5;241m.[39m_send_request(method, url, body, headers, encode_chunked)

File [1;32m~\anaconda3\Lib\http\client.py:1332[0m, in [0;36mHTTPConnection._send_request[1;34m(self, method, url, body, headers, encode_chunked)[0m
[0;32m   1331[0m     body [38;5;241m=[39m _encode(body, [38;5;124m'[39m[38;5;124mbody[39m[38;5;124m'[39m)
[1;32m-> 1332[0m [38;5;28mself[39m[38;5;241m.[39mendheaders(body, encode_chunked[38;5;241m=[39mencode_chunked)

File [1;32m~\anaconda3\Lib\http\client.py:1281[0m, in [0;36mHTTPConnection.endheaders[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1280[0m     [38;5;28;01mraise[39;00m CannotSendHeader()
[1;32m-> 1281[0m [38;5;28mself[39m[38;5;241m.[39m_send_output(message_body, encode_chunked[38;5;241m=[39mencode_chunked)

File [1;32m~\anaconda3\Lib\http\client.py:1041[0m, in [0;36mHTTPConnection._send_output[1;34m(self, message_body, encode_chunked)[0m
[0;32m   1040[0m [38;5;28;01mdel[39;00m [38;5;28mself[39m[38;5;241m.[39m_buffer[:]
[1;32m-> 1041[0m [38;5;28mself[39m[38;5;241m.[39msend(msg)
[0;32m   1043[0m [38;5;28;01mif[39;00m message_body [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m   1044[0m 
[0;32m   1045[0m     [38;5;66;03m# create a consistent interface to message_body[39;00m

File [1;32m~\anaconda3\Lib\http\client.py:979[0m, in [0;36mHTTPConnection.send[1;34m(self, data)[0m
[0;32m    978[0m [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mauto_open:
[1;32m--> 979[0m     [38;5;28mself[39m[38;5;241m.[39mconnect()
[0;32m    980[0m [38;5;28;01melse[39;00m:

File [1;32m~\anaconda3\Lib\http\client.py:1458[0m, in [0;36mHTTPSConnection.connect[1;34m(self)[0m
[0;32m   1456[0m     server_hostname [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mhost
[1;32m-> 1458[0m [38;5;28mself[39m[38;5;241m.[39msock [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_context[38;5;241m.[39mwrap_socket([38;5;28mself[39m[38;5;241m.[39msock,
[0;32m   1459[0m                                       server_hostname[38;5;241m=[39mserver_hostname)

File [1;32m~\anaconda3\Lib\ssl.py:517[0m, in [0;36mSSLContext.wrap_socket[1;34m(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)[0m
[0;32m    511[0m [38;5;28;01mdef[39;00m [38;5;21mwrap_socket[39m([38;5;28mself[39m, sock, server_side[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[0;32m    512[0m                 do_handshake_on_connect[38;5;241m=[39m[38;5;28;01mTrue[39;00m,
[0;32m    513[0m                 suppress_ragged_eofs[38;5;241m=[39m[38;5;28;01mTrue[39;00m,
[0;32m    514[0m                 server_hostname[38;5;241m=[39m[38;5;28;01mNone[39;00m, session[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[0;32m    515[0m     [38;5;66;03m# SSLSocket class handles server_hostname encoding before it calls[39;00m
[0;32m    516[0m     [38;5;66;03m# ctx._wrap_socket()[39;00m
[1;32m--> 517[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39msslsocket_class[38;5;241m.[39m_create(
[0;32m    518[0m         sock[38;5;241m=[39msock,
[0;32m    519[0m         server_side[38;5;241m=[39mserver_side,
[0;32m    520[0m         do_handshake_on_connect[38;5;241m=[39mdo_handshake_on_connect,
[0;32m    521[0m         suppress_ragged_eofs[38;5;241m=[39msuppress_ragged_eofs,
[0;32m    522[0m         server_hostname[38;5;241m=[39mserver_hostname,
[0;32m    523[0m         context[38;5;241m=[39m[38;5;28mself[39m,
[0;32m    524[0m         session[38;5;241m=[39msession
[0;32m    525[0m     )

File [1;32m~\anaconda3\Lib\ssl.py:1075[0m, in [0;36mSSLSocket._create[1;34m(cls, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, context, session)[0m
[0;32m   1074[0m             [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mdo_handshake_on_connect should not be specified for non-blocking sockets[39m[38;5;124m"[39m)
[1;32m-> 1075[0m         [38;5;28mself[39m[38;5;241m.[39mdo_handshake()
[0;32m   1076[0m [38;5;28;01mexcept[39;00m ([38;5;167;01mOSError[39;00m, [38;5;167;01mValueError[39;00m):

File [1;32m~\anaconda3\Lib\ssl.py:1346[0m, in [0;36mSSLSocket.do_handshake[1;34m(self, block)[0m
[0;32m   1345[0m         [38;5;28mself[39m[38;5;241m.[39msettimeout([38;5;28;01mNone[39;00m)
[1;32m-> 1346[0m     [38;5;28mself[39m[38;5;241m.[39m_sslobj[38;5;241m.[39mdo_handshake()
[0;32m   1347[0m [38;5;28;01mfinally[39;00m:

[1;31mConnectionResetError[0m: [WinError 10054] An existing connection was forcibly closed by the remote host

During handling of the above exception, another exception occurred:

[1;31mURLError[0m                                  Traceback (most recent call last)
Cell [1;32mIn[3], line 4[0m
[0;32m      1[0m pd[38;5;241m.[39moptions[38;5;241m.[39mdisplay[38;5;241m.[39mmax_columns [38;5;241m=[39m [38;5;241m10[39m
[0;32m      3[0m [38;5;66;03m# Load in data and view[39;00m
[1;32m----> 4[0m df [38;5;241m=[39m pd[38;5;241m.[39mread_stata([38;5;124m'[39m[38;5;124mhttps://github.com/QuantEcon/lecture-python/blob/master/source/_static/lecture_specific/mle/fp.dta?raw=true[39m[38;5;124m'[39m)
[0;32m      5[0m df[38;5;241m.[39mhead()

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\stata.py:2090[0m, in [0;36mread_stata[1;34m(filepath_or_buffer, convert_dates, convert_categoricals, index_col, convert_missing, preserve_dtypes, columns, order_categoricals, chunksize, iterator, compression, storage_options)[0m
[0;32m   2087[0m     [38;5;28;01mreturn[39;00m reader
[0;32m   2089[0m [38;5;28;01mwith[39;00m reader:
[1;32m-> 2090[0m     [38;5;28;01mreturn[39;00m reader[38;5;241m.[39mread()

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\stata.py:1702[0m, in [0;36mStataReader.read[1;34m(self, nrows, convert_dates, convert_categoricals, index_col, convert_missing, preserve_dtypes, columns, order_categoricals)[0m
[0;32m   1690[0m [38;5;129m@Appender[39m(_read_method_doc)
[0;32m   1691[0m [38;5;28;01mdef[39;00m [38;5;21mread[39m(
[0;32m   1692[0m     [38;5;28mself[39m,
[1;32m   (...)[0m
[0;32m   1700[0m     order_categoricals: [38;5;28mbool[39m [38;5;241m|[39m [38;5;28;01mNone[39;00m [38;5;241m=[39m [38;5;28;01mNone[39;00m,
[0;32m   1701[0m ) [38;5;241m-[39m[38;5;241m>[39m DataFrame:
[1;32m-> 1702[0m     [38;5;28mself[39m[38;5;241m.[39m_ensure_open()
[0;32m   1703[0m     [38;5;66;03m# Handle empty file or chunk.  If reading incrementally raise[39;00m
[0;32m   1704[0m     [38;5;66;03m# StopIteration.  If reading the whole thing return an empty[39;00m
[0;32m   1705[0m     [38;5;66;03m# data frame.[39;00m
[0;32m   1706[0m     [38;5;28;01mif[39;00m ([38;5;28mself[39m[38;5;241m.[39m_nobs [38;5;241m==[39m [38;5;241m0[39m) [38;5;129;01mand[39;00m (nrows [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m):

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\stata.py:1176[0m, in [0;36mStataReader._ensure_open[1;34m(self)[0m
[0;32m   1172[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[0;32m   1173[0m [38;5;124;03mEnsure the file has been opened and its header data read.[39;00m
[0;32m   1174[0m [38;5;124;03m"""[39;00m
[0;32m   1175[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m"[39m[38;5;124m_path_or_buf[39m[38;5;124m"[39m):
[1;32m-> 1176[0m     [38;5;28mself[39m[38;5;241m.[39m_open_file()

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\stata.py:1189[0m, in [0;36mStataReader._open_file[1;34m(self)[0m
[0;32m   1182[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39m_entered:
[0;32m   1183[0m     warnings[38;5;241m.[39mwarn(
[0;32m   1184[0m         [38;5;124m"[39m[38;5;124mStataReader is being used without using a context manager. [39m[38;5;124m"[39m
[0;32m   1185[0m         [38;5;124m"[39m[38;5;124mUsing StataReader as a context manager is the only supported method.[39m[38;5;124m"[39m,
[0;32m   1186[0m         [38;5;167;01mResourceWarning[39;00m,
[0;32m   1187[0m         stacklevel[38;5;241m=[39mfind_stack_level(),
[0;32m   1188[0m     )
[1;32m-> 1189[0m handles [38;5;241m=[39m get_handle(
[0;32m   1190[0m     [38;5;28mself[39m[38;5;241m.[39m_original_path_or_buf,
[0;32m   1191[0m     [38;5;124m"[39m[38;5;124mrb[39m[38;5;124m"[39m,
[0;32m   1192[0m     storage_options[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_storage_options,
[0;32m   1193[0m     is_text[38;5;241m=[39m[38;5;28;01mFalse[39;00m,
[0;32m   1194[0m     compression[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_compression,
[0;32m   1195[0m )
[0;32m   1196[0m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m(handles[38;5;241m.[39mhandle, [38;5;124m"[39m[38;5;124mseekable[39m[38;5;124m"[39m) [38;5;129;01mand[39;00m handles[38;5;241m.[39mhandle[38;5;241m.[39mseekable():
[0;32m   1197[0m     [38;5;66;03m# If the handle is directly seekable, use it without an extra copy.[39;00m
[0;32m   1198[0m     [38;5;28mself[39m[38;5;241m.[39m_path_or_buf [38;5;241m=[39m handles[38;5;241m.[39mhandle

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\common.py:716[0m, in [0;36mget_handle[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[0;32m    713[0m     codecs[38;5;241m.[39mlookup_error(errors)
[0;32m    715[0m [38;5;66;03m# open URLs[39;00m
[1;32m--> 716[0m ioargs [38;5;241m=[39m _get_filepath_or_buffer(
[0;32m    717[0m     path_or_buf,
[0;32m    718[0m     encoding[38;5;241m=[39mencoding,
[0;32m    719[0m     compression[38;5;241m=[39mcompression,
[0;32m    720[0m     mode[38;5;241m=[39mmode,
[0;32m    721[0m     storage_options[38;5;241m=[39mstorage_options,
[0;32m    722[0m )
[0;32m    724[0m handle [38;5;241m=[39m ioargs[38;5;241m.[39mfilepath_or_buffer
[0;32m    725[0m handles: [38;5;28mlist[39m[BaseBuffer]

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\common.py:368[0m, in [0;36m_get_filepath_or_buffer[1;34m(filepath_or_buffer, encoding, compression, mode, storage_options)[0m
[0;32m    366[0m [38;5;66;03m# assuming storage_options is to be interpreted as headers[39;00m
[0;32m    367[0m req_info [38;5;241m=[39m urllib[38;5;241m.[39mrequest[38;5;241m.[39mRequest(filepath_or_buffer, headers[38;5;241m=[39mstorage_options)
[1;32m--> 368[0m [38;5;28;01mwith[39;00m urlopen(req_info) [38;5;28;01mas[39;00m req:
[0;32m    369[0m     content_encoding [38;5;241m=[39m req[38;5;241m.[39mheaders[38;5;241m.[39mget([38;5;124m"[39m[38;5;124mContent-Encoding[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m)
[0;32m    370[0m     [38;5;28;01mif[39;00m content_encoding [38;5;241m==[39m [38;5;124m"[39m[38;5;124mgzip[39m[38;5;124m"[39m:
[0;32m    371[0m         [38;5;66;03m# Override compression based on Content-Encoding header[39;00m

File [1;32m~\anaconda3\Lib\site-packages\pandas\io\common.py:270[0m, in [0;36murlopen[1;34m(*args, **kwargs)[0m
[0;32m    264[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[0;32m    265[0m [38;5;124;03mLazy-import wrapper for stdlib urlopen, as that imports a big chunk of[39;00m
[0;32m    266[0m [38;5;124;03mthe stdlib.[39;00m
[0;32m    267[0m [38;5;124;03m"""[39;00m
[0;32m    268[0m [38;5;28;01mimport[39;00m [38;5;21;01murllib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mrequest[39;00m
[1;32m--> 270[0m [38;5;28;01mreturn[39;00m urllib[38;5;241m.[39mrequest[38;5;241m.[39murlopen([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32m~\anaconda3\Lib\urllib\request.py:216[0m, in [0;36murlopen[1;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[0;32m    214[0m [38;5;28;01melse[39;00m:
[0;32m    215[0m     opener [38;5;241m=[39m _opener
[1;32m--> 216[0m [38;5;28;01mreturn[39;00m opener[38;5;241m.[39mopen(url, data, timeout)

File [1;32m~\anaconda3\Lib\urllib\request.py:525[0m, in [0;36mOpenerDirector.open[1;34m(self, fullurl, data, timeout)[0m
[0;32m    523[0m [38;5;28;01mfor[39;00m processor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocess_response[38;5;241m.[39mget(protocol, []):
[0;32m    524[0m     meth [38;5;241m=[39m [38;5;28mgetattr[39m(processor, meth_name)
[1;32m--> 525[0m     response [38;5;241m=[39m meth(req, response)
[0;32m    527[0m [38;5;28;01mreturn[39;00m response

File [1;32m~\anaconda3\Lib\urllib\request.py:634[0m, in [0;36mHTTPErrorProcessor.http_response[1;34m(self, request, response)[0m
[0;32m    631[0m [38;5;66;03m# According to RFC 2616, "2xx" code indicates that the client's[39;00m
[0;32m    632[0m [38;5;66;03m# request was successfully received, understood, and accepted.[39;00m
[0;32m    633[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;241m200[39m [38;5;241m<[39m[38;5;241m=[39m code [38;5;241m<[39m [38;5;241m300[39m):
[1;32m--> 634[0m     response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39merror(
[0;32m    635[0m         [38;5;124m'[39m[38;5;124mhttp[39m[38;5;124m'[39m, request, response, code, msg, hdrs)
[0;32m    637[0m [38;5;28;01mreturn[39;00m response

File [1;32m~\anaconda3\Lib\urllib\request.py:557[0m, in [0;36mOpenerDirector.error[1;34m(self, proto, *args)[0m
[0;32m    555[0m     http_err [38;5;241m=[39m [38;5;241m0[39m
[0;32m    556[0m args [38;5;241m=[39m ([38;5;28mdict[39m, proto, meth_name) [38;5;241m+[39m args
[1;32m--> 557[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;241m*[39margs)
[0;32m    558[0m [38;5;28;01mif[39;00m result:
[0;32m    559[0m     [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:496[0m, in [0;36mOpenerDirector._call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[0;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[1;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[0;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:749[0m, in [0;36mHTTPRedirectHandler.http_error_302[1;34m(self, req, fp, code, msg, headers)[0m
[0;32m    746[0m fp[38;5;241m.[39mread()
[0;32m    747[0m fp[38;5;241m.[39mclose()
[1;32m--> 749[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39mopen(new, timeout[38;5;241m=[39mreq[38;5;241m.[39mtimeout)

File [1;32m~\anaconda3\Lib\urllib\request.py:525[0m, in [0;36mOpenerDirector.open[1;34m(self, fullurl, data, timeout)[0m
[0;32m    523[0m [38;5;28;01mfor[39;00m processor [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mprocess_response[38;5;241m.[39mget(protocol, []):
[0;32m    524[0m     meth [38;5;241m=[39m [38;5;28mgetattr[39m(processor, meth_name)
[1;32m--> 525[0m     response [38;5;241m=[39m meth(req, response)
[0;32m    527[0m [38;5;28;01mreturn[39;00m response

File [1;32m~\anaconda3\Lib\urllib\request.py:634[0m, in [0;36mHTTPErrorProcessor.http_response[1;34m(self, request, response)[0m
[0;32m    631[0m [38;5;66;03m# According to RFC 2616, "2xx" code indicates that the client's[39;00m
[0;32m    632[0m [38;5;66;03m# request was successfully received, understood, and accepted.[39;00m
[0;32m    633[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m ([38;5;241m200[39m [38;5;241m<[39m[38;5;241m=[39m code [38;5;241m<[39m [38;5;241m300[39m):
[1;32m--> 634[0m     response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39merror(
[0;32m    635[0m         [38;5;124m'[39m[38;5;124mhttp[39m[38;5;124m'[39m, request, response, code, msg, hdrs)
[0;32m    637[0m [38;5;28;01mreturn[39;00m response

File [1;32m~\anaconda3\Lib\urllib\request.py:557[0m, in [0;36mOpenerDirector.error[1;34m(self, proto, *args)[0m
[0;32m    555[0m     http_err [38;5;241m=[39m [38;5;241m0[39m
[0;32m    556[0m args [38;5;241m=[39m ([38;5;28mdict[39m, proto, meth_name) [38;5;241m+[39m args
[1;32m--> 557[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;241m*[39margs)
[0;32m    558[0m [38;5;28;01mif[39;00m result:
[0;32m    559[0m     [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:496[0m, in [0;36mOpenerDirector._call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[0;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[1;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[0;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:749[0m, in [0;36mHTTPRedirectHandler.http_error_302[1;34m(self, req, fp, code, msg, headers)[0m
[0;32m    746[0m fp[38;5;241m.[39mread()
[0;32m    747[0m fp[38;5;241m.[39mclose()
[1;32m--> 749[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mparent[38;5;241m.[39mopen(new, timeout[38;5;241m=[39mreq[38;5;241m.[39mtimeout)

File [1;32m~\anaconda3\Lib\urllib\request.py:519[0m, in [0;36mOpenerDirector.open[1;34m(self, fullurl, data, timeout)[0m
[0;32m    516[0m     req [38;5;241m=[39m meth(req)
[0;32m    518[0m sys[38;5;241m.[39maudit([38;5;124m'[39m[38;5;124murllib.Request[39m[38;5;124m'[39m, req[38;5;241m.[39mfull_url, req[38;5;241m.[39mdata, req[38;5;241m.[39mheaders, req[38;5;241m.[39mget_method())
[1;32m--> 519[0m response [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_open(req, data)
[0;32m    521[0m [38;5;66;03m# post-process response[39;00m
[0;32m    522[0m meth_name [38;5;241m=[39m protocol[38;5;241m+[39m[38;5;124m"[39m[38;5;124m_response[39m[38;5;124m"[39m

File [1;32m~\anaconda3\Lib\urllib\request.py:536[0m, in [0;36mOpenerDirector._open[1;34m(self, req, data)[0m
[0;32m    533[0m     [38;5;28;01mreturn[39;00m result
[0;32m    535[0m protocol [38;5;241m=[39m req[38;5;241m.[39mtype
[1;32m--> 536[0m result [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_call_chain([38;5;28mself[39m[38;5;241m.[39mhandle_open, protocol, protocol [38;5;241m+[39m
[0;32m    537[0m                           [38;5;124m'[39m[38;5;124m_open[39m[38;5;124m'[39m, req)
[0;32m    538[0m [38;5;28;01mif[39;00m result:
[0;32m    539[0m     [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:496[0m, in [0;36mOpenerDirector._call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    494[0m [38;5;28;01mfor[39;00m handler [38;5;129;01min[39;00m handlers:
[0;32m    495[0m     func [38;5;241m=[39m [38;5;28mgetattr[39m(handler, meth_name)
[1;32m--> 496[0m     result [38;5;241m=[39m func([38;5;241m*[39margs)
[0;32m    497[0m     [38;5;28;01mif[39;00m result [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m    498[0m         [38;5;28;01mreturn[39;00m result

File [1;32m~\anaconda3\Lib\urllib\request.py:1391[0m, in [0;36mHTTPSHandler.https_open[1;34m(self, req)[0m
[0;32m   1390[0m [38;5;28;01mdef[39;00m [38;5;21mhttps_open[39m([38;5;28mself[39m, req):
[1;32m-> 1391[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mdo_open(http[38;5;241m.[39mclient[38;5;241m.[39mHTTPSConnection, req,
[0;32m   1392[0m         context[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_context, check_hostname[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39m_check_hostname)

File [1;32m~\anaconda3\Lib\urllib\request.py:1351[0m, in [0;36mAbstractHTTPHandler.do_open[1;34m(self, http_class, req, **http_conn_args)[0m
[0;32m   1348[0m         h[38;5;241m.[39mrequest(req[38;5;241m.[39mget_method(), req[38;5;241m.[39mselector, req[38;5;241m.[39mdata, headers,
[0;32m   1349[0m                   encode_chunked[38;5;241m=[39mreq[38;5;241m.[39mhas_header([38;5;124m'[39m[38;5;124mTransfer-encoding[39m[38;5;124m'[39m))
[0;32m   1350[0m     [38;5;28;01mexcept[39;00m [38;5;167;01mOSError[39;00m [38;5;28;01mas[39;00m err: [38;5;66;03m# timeout error[39;00m
[1;32m-> 1351[0m         [38;5;28;01mraise[39;00m URLError(err)
[0;32m   1352[0m     r [38;5;241m=[39m h[38;5;241m.[39mgetresponse()
[0;32m   1353[0m [38;5;28;01mexcept[39;00m:

[1;31mURLError[0m: <urlopen error [WinError 10054] An existing connection was forcibly closed by the remote host>
URLError: <urlopen error [WinError 10054] An existing connection was forcibly closed by the remote host>

